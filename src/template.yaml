AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lennies api, its hers'

Parameters:
  DEBUG:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  TopicName:
    Type: String
    Default: LennieSns
    AllowedValues:
      - LennieSns
  BucketName:
    Type: String
    Default: jvb-code
    AllowedValues:
      - jvb-code

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: nodejs14.x
    Environment:
      Variables:
        DEBUG: !Ref DEBUG
        sns_arn: !Ref HttpSnsTopic

Resources:
  HttpApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowHeaders: "*"
        AllowMethods: "*"
        AllowOrigin: "*"

  HttpSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref TopicName
      TopicName: !Ref TopicName

  # Permissions:
  # https://aws.amazon.com/premiumsupport/knowledge-center/lambda-sam-template-permissions/
  # https://github.com/aws/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
  HttpSnsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: functions/http-sns.handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /email
            Method: post
            RestApiId: !Ref HttpApiGateway
        OptionsEvent:
          Type: Api
          Properties:
            Path: /email
            Method: options
            RestApiId: !Ref HttpApiGateway

  SnsS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: functions/sns-s3.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref HttpSnsTopic

  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: functions/send-email.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref HttpSnsTopic
        CronEvent:
          Type: Schedule
          Properties:
            Name: "2DayEmailScheduler"
            Description: "Once every 2 days send pending emails if within 3 days of send"
            Schedule: "cron(0 12 */2 * ? *)"
            Input: '{"CloudWatchEvent": true}'

Outputs:
  HttpApiGateway:
    Description: ApiGateway between front end requests and backend lambda
    Value: !Ref HttpApiGateway
  HttpSnsTopic:
    Description: Sns topic to decouple Http request from backend processes
    Value: !Ref HttpSnsTopic
  HttpSnsFunction:
    Description: Respond to http requests at ApiGateway, send message on to SNS
    Value: !Ref HttpSnsFunction
  SnsS3Function:
    Description: Write all email requests to json file in S3
    Value: !Ref SnsS3Function
  SendEmailFunction:
    Description: Send email at request, or save to json. Also triggered by Schedule to send saved emails.
    Value: !Ref SendEmailFunction