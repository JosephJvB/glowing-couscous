AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lennies api, its hers'

Parameters:
  DEBUG:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  QueueName:
    Type: String
    Default: LennieQueue
    AllowedValues:
      - LennieQueue
  BucketName:
    Type: String
    Default: jvb-code
    AllowedValues:
      - jvb-code
  SendGridApiKey:
    Type: String
    Default: '{{resolve:ssm:sendgrid_apikey:1}}'
    AllowedValues:
      - '{{resolve:ssm:sendgrid_apikey:1}}'

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: nodejs14.x
    Environment:
      Variables:
        DEBUG: !Ref DEBUG

Resources:
  # review: deployments were creating new gateways - new urls
  # I think it's because the resources were changing, adding roles/permissions?
  HttpApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowHeaders: "*"
        AllowMethods: "*"
        AllowOrigin: "*"

  HttpSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName

  # Permissions:
  # https://aws.amazon.com/premiumsupport/knowledge-center/lambda-sam-template-permissions/
  # https://github.com/aws/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
  HttpSqsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          sendgrid_apikey: !Ref SendGridApiKey
          sqs_url: !Ref HttpSqsQueue
      CodeUri: ./dist
      Handler: functions/http-sqs.handler
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Ref QueueName
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /email
            Method: post
            RestApiId: !Ref HttpApiGateway
        OptionsEvent:
          Type: Api
          Properties:
            Path: /email
            Method: options
            RestApiId: !Ref HttpApiGateway

  SqsS3Function:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      MemorySize: 256
      CodeUri: ./dist
      Handler: functions/sqs-s3.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt HttpSqsQueue.Arn
            BatchSize: 500
            MaximumBatchingWindowInSeconds: 120

  CronFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          sendgrid_apikey: !Ref SendGridApiKey
      CodeUri: ./dist
      Handler: functions/cron.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        CronEvent:
          Type: Schedule
          Properties:
            Name: "2DayEmailScheduler"
            Description: "Once every 2 days send pending emails if within 3 days of send"
            Schedule: "cron(0 12 */2 * ? *)"
            Input: '{"CloudWatchEvent": true}'

Outputs:
  HttpApiGateway:
    Description: ApiGateway between front end requests and backend lambda
    Value: !Ref HttpApiGateway
  HttpSqsQueue:
    Description: sqs queue to decouple Http request from backend processes
    Value: !Ref HttpSqsQueue
  HttpSqsFunction:
    Description: Respond to http requests at ApiGateway, send message on to sqs, send email if sendAt immediate
    Value: !Ref HttpSqsFunction
  SqsS3Function:
    Description: Pull batch from queue, write to s3
    Value: !Ref SqsS3Function
  CronFunction:
    Description: Once every two days, look up pending list and send emails form there
    Value: !Ref CronFunction